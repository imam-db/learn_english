version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: english_learning_postgres
    environment:
      POSTGRES_DB: english_learning
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - english_learning_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: english_learning_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - english_learning_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: english_learning_backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/english_learning
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - english_learning_network
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: english_learning_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
      - frontend_cache:/app/.next
    depends_on:
      - backend
    networks:
      - english_learning_network
    command: npm run dev

  # Celery Worker (Background Tasks)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: english_learning_celery_worker
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/english_learning
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - english_learning_network
    command: celery -A app.core.celery worker --loglevel=info

  # Celery Beat (Scheduled Tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: english_learning_celery_beat
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/english_learning
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - english_learning_network
    command: celery -A app.core.celery beat --loglevel=info

volumes:
  postgres_data:
  redis_data:
  backend_cache:
  frontend_node_modules:
  frontend_cache:

networks:
  english_learning_network:
    driver: bridge